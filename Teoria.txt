1. SINTAXIS Y TIPOS
    Go es un lenguaje estaticamente tipado y compilado, con sintaxis clara y concisa
   
    1.2 VARIABLES
       Declaracion explicita: var edad int = 30
                              var nombre string = "Juan"
       Inferencia de tipo (Go lo deduce): var activo = true // bool
                                          var temp = 36.6 // float64
       Declaracion corta (solo dentro de funciones): mensaje := "Hola mundo"
                                                     contador := 5
    1.3 TIPOS PRIMITIVOS
       Tipo        Descripcion          Ejemplo
       int       Entero            var x int = 42
       float64   Decimal           var pi float64 = 3.14
       string    Texto             var s string = "Hola"
       bool      Booleano          var ok bool = true
       rune      Caracter Unicode  var letra rune = 'a'
       byte      Alias de uint8    var b byte = 255
    
    1.4 CONSTANTES
        const pi = 3.14159
        const saludo string = "Hola"
    
    1.5 ARRAYS Y SLICES
        Array (tamaño fijo): var numeros [3]int = [3]int{1, 2, 3}
        Slices (lista dinamica): nombres := []string{"Ana", "Luis", "Pedro"}
        Operaciones con slices:
            nombres = append(nombres, "Laura") // agrega Laura a la lista de nombres
            fmt.Println(nombres[1]) // Luis
            fmt.Println(len(nombres)) // largo del slice
    
    1.6 MAPS (dicts/claves y valores)
        edades := map[string]int{
            "Juan": 30,
            "Ana": 25,
        }
        fmt.Println(edades["Juan"]) // 30

2. CONTROL DE FLUJO Y FUNCIONES

    2.1 ESTRUCTURAS DE CONTROL
        if, else if, else:
            edad := 20
            if edad < 18 {
                fmt.Println("Menor de edad")
            } else if edad < 65 {
                fmt.Println("Adulto")
            } else {
                fmt.Println("Jubilado")
            }
        
        switch: mas limpio que muchos if
            dia := "martes"

            switch dia {
                case "lunes":
                    fmt.Println("Comienza la semana")
                case "viernes":
                    fmt.Println("Casi finde!")
                default:
                    fmt.Println("Dia normal")
            }
        
                sin condicion
            valor := 10
            switch {
                case valor < 0:
                    fmt.Println("Negativo")
                case valor == 0:
                    fmt.Println("Cero")
                default:
                    fmt.Println("Positivo")
            }
        
        for: Go solo tiene for como bucle (no hay while, do-while)

            Clasico:
                for i := 0; i < 5; i++ {
                    fmt.Println(i)
                }
            
            Tipo while:
                x := 0
                for x < 3 {
                    fmt.Println(x)
                    x++
                }
            
            For infinito:
                for {
                    fmt.Println("Esto corre para siempre")
                    break // Salis manualmente
                }
        
        break y continue:
            for i := 0; i < 5; i++ {
                if i == 2 {
                    continue // salta al siguiente
                }
                if i == 4 {
                    break // corta el bucle
                }
                fmt.Println(i)
            } // imprime 0 1 3
    
    2.2 FUNCIONES
        Declaracion:
            func saludar(nombre string) {
                fmt.Println("Hola", nombre)
            }
        
        Llamado:
            saludar("Mara")
        
        Con retorno:
            func cuadrado(n int) int {
                return n*n
            }

            resultado := cuadrado(4) // 16

        Multiples retornos:
            func dividir(dividendo, divisor float64) (float64, bool) {
                if divisor == 0 {
                    return 0, false
                }
                return dividendo / divisor, true
            }
        
        Funciones anonimas (sin nombre):
            suma := func(a, b int) int {
                return a+b
            }
            fmt.Println(suma(2, 3)) // 5
        
        Closures (recuerdan su contexto):
            func contador() func() int {
                x := 0
                return func() int {
                    x++
                    return x
                }
            }

            c := contador()
            fmt.Println(c()) // 1
            fmt.Println(c()) // 2

3. STRUCTS Y METODOS
    En Go no hay clases ni objetos como en Java o Python, pero si hay structs y metodos,
    que permiten encapsular datos y comportamiento de forma muy poderosa

    3.1 STRUCT
        Es un conjunto de campos nombrados que agrupan datos relacionados, parecido a una "clase" en otros lenguajes
            Definicion:
                type Persona struct { // define un nuevo tipo Persona
                    Nombre string
                    Edad int
                    Activo bool // cada campo tiene su propio tipo
                }

            Crear y usar instancias:
                p1 := Persona {
                    Nombre: "Ana",
                    Edad: 36,
                    Activo: true,
                }

                p2 := Persona{"Luis", 25, false}

                fmt.Println(p1.Nombre)
                p2.Edad = 26

            Metodos asociados:
                Metodo con receptor por valor:
                    func (p Persona) Saludar() { // trabaja con copia de p
                        fmt.Printf("Hola, soy %s y tengo %d años\n", p.Nombre, p.Edad)
                    }

                Metodo con receptor por puntero:
                    func (p *Persona) CumplirAnios() {
                        p.Edad++ // modifica la instancia original
                    }

            Composicion en lugar de herencia:
                Go no tiene herencia de clases, pero puedes componer structs incluyendo uno dentro de otro
                    type Direccion struct {
                        Calle string
                        Ciudad string
                    }

                    type Empleado struct {
                        Persona      // embedding: todos los campos y metodos de Persona
                        ID     string
                        Direccion    // embedding anidado
                    }

                    e := Empleado {
                        Persona: Persona {Nombre: "Mara", Edad: 28, Activo: true},
                        ID: "EMP001",
                        Direccion: Direccion {Calle: "Av. Siempreviva", Ciudad: "Springfield"},
                    }
                    fmt.Println(e.Nombre) // Mara
                    fmt.Println(e.Ciudad) // Springfield

                La composicion (embedding) promueve la reutilizacion de datos y comportamientos, clave en clean arquitectures

4. INTERFACES Y POLIMORFISMO
    4.1 INTERFAZ
        Es un conjunto de metodos. Define comportamientos sin implementar la logica. Cualquier tipo que provea esos metodos, implementa la interfaz de forma implicita
            Definicion:
                type Describible interface {
                    Describir() string
                }
                // Describible exige que el tipo que la implemente tenga un metodo Describir()
            
            Implementacion implicita:
                No hace falta declarar implements o similar. Si un tipo tiene los metodos requeridos, se convierte automaticamente en implementador de la interfaz
                    type Persona struct {
                        Nombre string
                    }

                    func (p Persona) Describir() string {
                        return "Persona: " + p.Nombre
                    }

                    // Persona implementa Describible sin nada mas:
                    var d Describible = Persona {Nombre: "Ana"}
                    fmt.Println(d.Describir()) // "Persona: Ana"

            Uso de interfaces:
                Permiten desacoplar codigo. Podemos escribir funciones que trabajen con cualquier tipo que implemente la interfaz
                    func Mostrar(d Describible) {
                        fmt.Println(d.Describir())
                    }

                    Mostrar(Persona{"Luis"})
                    // Mostrar funciona con Persona o con cualquier otro tipo que implemente Describir()
            
            Interfaces comunes en la biblioteca estandar:
                error: type error interface { Error() string }
                fmt.Stringer: type Stringer interface { String() string }

                Cualquier tipo con metodo String() string se formatea con fmt
            
            Interface vacia y type assertion:
                Interface vacia "interface{}": puede contener cualquier valor
                    var v interface{}
                    v = 42
                    v = "texto"
                    v = Persona{"Maria"}
                
                Type assertion: para extraer valor concreto de "interface{}"
                    var v interface{} = "hola"
                    s := v.(string)   // s es string, "hola"
                    n, ok := v.(int)  // ok=false, porque v no es int
            
            Slices de interfaces:
                Podes tener colecciones de objetos heterogeneos que implementen la misma interfaz
                    var describibles []Describible
                    describibles = append(describibles, Persona{"Ana"})
                    describibles = append(describibles, OtroTipo{})
                    for _, d := range describibles {
                        fmt.Println(d.Describir())
                    }
            
            Conceptos clave:
                Implicito: solo se necesita tener los metodos para implementarla
                Polimorfismo: multiples tipos pueden implementar la misma interfaz
                Desacoplamiento: el codigo solo depende de la interfaz, no de implementaciones concretas
                Vacia(interface{}): util pero se pierde tipado

5. TESTING
    Package testing
        - Los tests van en archivos *_test.go junto al codigo que se quiere probar (mismo package)
        - Cada funcion de test debe empezar con Test y recibir (t *testing.T)
        - Se ejecutan con go test ./... (ejecuta todas las tests)

    Convencion de nombres
        - Codigo en pago.go -> tests en pago_test.go
        - Funcion Pagar -> test TestPagar
        - Funcion ProcesarPago -> test TestProcesarPago

    Aserciones manuales
        - No hay framework integrado, se usa if + t.Errorf
            if got != want {
                t.Errorf("Pagar() = %v, want %v", got, want) // marca el test como fallido y muestra el mensaje
            }
    
    Table-driven tests
        - Muy comun cuando se tienen varios escenarios. Se define una tabla de casos con entrada y salida esperada,
        luego se itera:
            tests := []struct{
                name  string
                fondos float64
                monto  float64 // valores involucrados en la funcion
                wantOk bool // resultado esperado de retorno
            }{
                {"suficiente", 100, 50, true},
                {"insuficiente", 30, 50, false},
            }
            for _, tc := range tests {
                t.Run(tc.name, func(t *testing.T) {
                    // test…
                })
            }
    
    Mocks basados en interfaces
        - Para testear funciones que reciben una interfaz, creamos un stub que implemente la interfaz,
        capturamos llamadas y devolvemos el comportamiento que deseamos
            // Mock simple. Simulamos un MedioDePago y registramos como fue llamado
            type PagoFake struct {
                llamadoCon float64
                okReturn bool
            }
            // Simula el cobro: guarda el monto y devuelve okReturn
            func (p *PagoFake) Pagar(monto float64) bool {
                p.llamadoCon = monto // se guarda el monto con que se llamo
                return p.okReturn // valor que queremos que Pagar() devuelva
            }
            func TestProcesarPago(t *testing.T) {
                // Preparamos el mock
                fake := &PagoFake{OK: true}
                // Llamamos a la funcion a testear
                ProcesarPago(fake, 123.45)
                
                // Verificamos que Pagar recibio el monto correcto
                if fake.LlamadoCon != 123.45 {
                    t.Errorf("Esperaba que Pagar se llamara con 123.45, ¡vino %f!", fake.LlamadoCon)
                }
            }
    
    Injecting dependencies
        - Las funciones deben recibir sus dependencias (repos, procesadores, etc) como parametros

6. PRINCIPIOS SOLID Y DDD

    6.1 PRINCIPIOS SOLID
        
        SRP - Single Responsibility Principle
            Un modulo o clase debe tener una unica razon para cambiar.
            En Go, cada paquete o struct debe ocuparse de una sola responsabilidad
                
                // ¿Mala práctica? Un mismo struct que valida datos y también accede a la BD:
                type UsuarioService struct { /* ... */ }
                func (s *UsuarioService) Validar(u Usuario) error { /* ... */ }
                func (s *UsuarioService) GuardarEnBD(u Usuario) error { /* ... */ }

                //Mejor separar en dos tipos:
                type UsuarioValidator struct { /* ... */ }
                func (v *UsuarioValidator) Validar(u Usuario) error { /* ... */ }

                type UsuarioRepository interface { Save(Usuario) error /* ... */ }
        
        OCP - Open/Closed Principle
            El codigo debe estar abierto para extension pero cerrado para modificacion.
            Con interfaces en Go, se pueden añadir nuevas implementaciones sin tocar codigo existente

        LSP - Liskov Substitution Principle
            Los tipos derivados deben poder sustituir a los base sin alterar el correcto funcionamiento del programa
            En Go, cualquier implementacion de una interfaz debe comportarse como se espera por el consumidor
        
        ISP - Interface Segregation Principle
            Las interfaces deben ser especificas y pequeñas. Mejor varias interfaces pequeñas que una gigante

        DIP - Dependency Inversion Principle
            Depende de abstracciones (interfaces), no de implementaciones concretas (mocks y repos)
        
    6.2 DOMAIN-DRIVEN DESIGN (DDD)

        Es una metodologia para diseñar software centrado en el dominio de negocio

            - ENTIDADES: objetos con identidad propia y ciclo de vida. Ej: Usuario con su ID
            - VALUE OBJECTS: objetos inmutables definidos por sus atributos, sin identidad propia. Ej: Dinero{Moneda: "USD", Cantidad: 100}
            - AGREGADO: conjunto de entidades y objetos de valor que forman una unidad de consistencia. Ej: Pedido con sus LineasDePedido
            - REPOSITORIO: abstraccion para acceder a colecciones de agregados. Ej: PedidoRepository con metodos Save, FindByID
            - SERVICIOS DE DOMINIO: logica de negocio que no encaja naturalmente en una entidad o value object. Ej: servicio de calculo de descuentos
            - FACTORIES: crean agregados garantizando la validez de invariantes            

7 CONCEPTOS DE ARQUITECTURA HEXAGONAL (PORTS & ADAPTERS)

    La Arquitectura Hexagonal (tambien llamada Ports & Adapters) propone aislar el nucleo del dominio (logica de negocio)
    de las dependencias exteriores (bdd, interfaces de usuario, servicios externos) mediante puertos (interfaces) y adaptadores (implementaciones de esas interfaces)

    7.1 MOTIVACION
        - DESACOPLAMIENTO: el dominio no depende de librerias o frameworks externos
        - TESTABILIDAD: la logica principal se prueba sin necesidad de infraestructura real
        - FLEXIBILIDAD: cambiar la bdd o el canal de comunicacion (CLI, HTTP, mensajeria) sin tocar el dominio
        - MANTENIBILIDAD: cada pieza tiene responsabilidad unica y limites claros
    
    7.2 COMPONENTES CLAVE
        - DOMINIO: Entidades, Value Objects y reglas de negocio puras
        - PORTS: Interfaces que define el dominio para interactuar con el exterior (entrada/salida)
        - ADAPTERS: Implementaciones concretas de los ports (repos en BD, controladores HTTP, etc)
        - APPLICATION: Casos de uso o servicios de aplicacion que orquestan el dominio

        Visualmente seria un hexagono con el dominio en el centro, y cada cara es un port; de cada cara sale un adapter concreto
    
    7.3 PORTS DE ENTRADA Y SALIDA
        - ENTRADA (driven/inbound): lo que recibe la app desde el exterior (ej. controlador HTTP invocando un caso de uso)
            type PedidoRepository interface {
                Save(p Pedido) error
                FindByID(id string) (Pedido, error)
            }
            Adapters de salida: RepositorioSQL implementa PedidoRepository con SQL
                      RepositorioMemoria (implementacion en memoria para tests)

        - SALIDA (driving/outbound): lo que el dominio necesita llamar en el exterior (ej. repositorio, cliente HTTP a un servicio externo)
            type CrearPedidoUseCase interface {
                Ejecutar(input CrearPedidoInput) (CrearPedidoOutput, error)
            }
            Adapters de entrada: controlador HTTP que lee JSON, llama al caso de uso y devuelve JSON
                                 CLI que parsea flags y muestra resultados por consola
        
    7.4 FLUJO DE DEPENDENCIAS
        1 - Inbound adapter (entrada) recibe la solicitud (ej. peticion HTTP)
        2 - Llama al caso de uso (interactor) pasando DTOs
        3 - El caso de uso invoca al dominio (entidades, servicios de dominio)
        4 - Cuando necesita persistir o consultar, usa un puerto de salida (interfaz)
        5 - El puerto de salida esta implementado por un outbound adapter (BD, API externa)
        6 - El resultado regresa por la misma cadena hasta el adaptador de entrada, que lo traduce a la respuesta al usuario

        REGLA DE DEPENDENCIA: las dependencias siempre apuntan hacia ADENTRO; el dominio no conoce ni depende de adaptadores
    
    7.5 ESTRUCTURA TIPICA DE CARPETAS EN GO
        /cmd/miapp/         <- punto de entrada (main.go)
        /internal/
            /application/   <- casos de uso (interactors)
        /domain/            <- entidades, V.O., interfaces (ports)
        /infrastructure/    <- adaptadores externos (DB, mensajersia)
        /interfaces/        <- adaptadores de entrada (HTTP handlers, CLI)
        /pkg/               <- (opcional) librerias exportables

    7.6 VENTAJAS PRINCIPALES
        - ESCALABILIDAD DEL CODIGO: añadir nuevas interfaces o adaptadores sin reescribir el dominio
        - FACIL TESTING: el dominio y casos de uso se prueban aisladamente con mocks
        - LEGIBILIDAD: la organizacion refleja el flujo y limites claros
        - SUSTITUCION DE IMPLEMENTACIONES: cambiar de MySQL a Mongo por ej., solo implica nuevos adaptadores