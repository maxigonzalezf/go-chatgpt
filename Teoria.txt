1. SINTAXIS Y TIPOS
    Go es un lenguaje estaticamente tipado y compilado, con sintaxis clara y concisa
   
    1.2 VARIABLES
       Declaracion explicita: var edad int = 30
                              var nombre string = "Juan"
       Inferencia de tipo (Go lo deduce): var activo = true // bool
                                          var temp = 36.6 // float64
       Declaracion corta (solo dentro de funciones): mensaje := "Hola mundo"
                                                     contador := 5
    1.3 TIPOS PRIMITIVOS
       Tipo        Descripcion          Ejemplo
       int       Entero            var x int = 42
       float64   Decimal           var pi float64 = 3.14
       string    Texto             var s string = "Hola"
       bool      Booleano          var ok bool = true
       rune      Caracter Unicode  var letra rune = 'a'
       byte      Alias de uint8    var b byte = 255
    
    1.4 CONSTANTES
        const pi = 3.14159
        const saludo string = "Hola"
    
    1.5 ARRAYS Y SLICES
        Array (tama√±o fijo): var numeros [3]int = [3]int{1, 2, 3}
        Slices (lista dinamica): nombres := []string{"Ana", "Luis", "Pedro"}
        Operaciones con slices:
            nombres = append(nombres, "Laura") // agrega Laura a la lista de nombres
            fmt.Println(nombres[1]) // Luis
            fmt.Println(len(nombres)) // largo del slice
    
    1.6 MAPS (dicts/claves y valores)
        edades := map[string]int{
            "Juan": 30,
            "Ana": 25,
        }
        fmt.Println(edades["Juan"]) // 30

2. CONTROL DE FLUJO Y FUNCIONES

    2.1 ESTRUCTURAS DE CONTROL
        if, else if, else:
            edad := 20
            if edad < 18 {
                fmt.Println("Menor de edad")
            } else if edad < 65 {
                fmt.Println("Adulto")
            } else {
                fmt.Println("Jubilado")
            }
        
        switch: mas limpio que muchos if
            dia := "martes"

            switch dia {
                case "lunes":
                    fmt.Println("Comienza la semana")
                case "viernes":
                    fmt.Println("Casi finde!")
                default:
                    fmt.Println("Dia normal")
            }
        
                sin condicion
            valor := 10
            switch {
                case valor < 0:
                    fmt.Println("Negativo")
                case valor == 0:
                    fmt.Println("Cero")
                default:
                    fmt.Println("Positivo")
            }
        
        for: Go solo tiene for como bucle (no hay while, do-while)

            Clasico:
                for i := 0; i < 5; i++ {
                    fmt.Println(i)
                }
            
            Tipo while:
                x := 0
                for x < 3 {
                    fmt.Println(x)
                    x++
                }
            
            For infinito:
                for {
                    fmt.Println("Esto corre para siempre")
                    break // Salis manualmente
                }
        
        break y continue:
            for i := 0; i < 5; i++ {
                if i == 2 {
                    continue // salta al siguiente
                }
                if i == 4 {
                    break // corta el bucle
                }
                fmt.Println(i)
            } // imprime 0 1 3
    
    2.2 FUNCIONES
        Declaracion:
            func saludar(nombre string) {
                fmt.Println("Hola", nombre)
            }
        
        Llamado:
            saludar("Mara")
        
        Con retorno:
            func cuadrado(n int) int {
                return n*n
            }

            resultado := cuadrado(4) // 16

        Multiples retornos:
            func dividir(dividendo, divisor float64) (float64, bool) {
                if divisor == 0 {
                    return 0, false
                }
                return dividendo / divisor, true
            }
        
        Funciones anonimas (sin nombre):
            suma := func(a, b int) int {
                return a+b
            }
            fmt.Println(suma(2, 3)) // 5
        
        Closures (recuerdan su contexto):
            func contador() func() int {
                x := 0
                return func() int {
                    x++
                    return x
                }
            }

            c := contador()
            fmt.Println(c()) // 1
            fmt.Println(c()) // 2

